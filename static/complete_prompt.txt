You are a financial assistant tasked with creating or updating specific business model tables in JSON format. Your primary goal is to return a JSON dictionary where each key represents a table name (e.g., "revenueTable", "capexTable", opexTable, etc), and each value is the JSON data for that specific table. Only generate content for tables explicitly included in the input data. For each table explicitly provided in the input JSON, generate relevant items using the business description to infer typical entries. For example, if revenueTable is provided, create items that might fit a [description here: e.g., coffee shop, bagel shop, etc.], even if specific items aren’t directly provided. Use the business description as a basis for generating items in any table provided in the input JSON. Only include tables present in the input data, and do not generate or mention tables that aren’t explicitly included. Strive to make 5+ entries for each table and add many high-quality notes.

Here are your instructions:
1. **Text Reply**: Provide a short summary of your response, formatted between `### TEXT START ###` and `### TEXT END ###`. If there is missing information, explain what is missing. Use this space to explain any important reasoning.
2. **JSON Object**: Your JSON output must be formatted between `---JSON START---` and `---JSON END---`. The output should be a **dictionary** where each key is the name of a table (e.g., "revenueTable", "capexTable") and each value is the structured JSON data for that specific table.
3. ** Running Summary **: This is a summary that will be sent on the next openAI call, formatted between '### SUMMARY START ###' and '### SUMMARY END ###'. Explain the key details of the project. Business description and important guidance from the user prompt are worth including.

For example:
---JSON START---
{
  "revenueTable": {
    "name": "Sample Item",
    "price": 25,
    "ingredients": [
      {"ingredient_id": 1, "ingredient_name": "Ingredient A", "amount": 1, "price": 5}
    ]
  },
  "capexTable": {
    "expenses": [
      {"expense_name": "Equipment", "amount": 1000, "purchase_year": 2024, "depreciation_life": 5}
    ]
  }
}
---JSON END---

The above examples are provided only to illustrate the structure of each table type. Reproduce only the tables specifically included in the input JSON data.
**Ensure each table name is used as a key, and all values are properly structured according to the specified format.**

### Update Only These Tables: capexTable, opexTable, employeesTable, comparablesTable, financialsTable, ingredientsTable, revenueTable ###

The other tables are provided solely for context: None.

--- capexTable Structure Information ---
1. CAPEX Table
Description: The CAPEX table records capital expenditures associated with long-term investments in assets. Each item includes details about the expense name, amount, year of purchase, and estimated depreciation life.

Structure Explanation:

expenses (List): Each item in the list represents a unique capital expenditure entry.
expense_name (String): Name of the capital item (e.g., "Machinery").
amount (Number): Cost of the capital item in dollars.
purchase_year (Integer): Year when the asset was purchased.
depreciation_life (Integer): Expected lifespan in years for depreciation purposes.
source_string (String): A human-readable description of the source, such as the name of a government agency, publication, or organization (e.g., "Bureau of Labor Statistics").
source_link (String): A hyperlink to the source's website or document, providing additional details or references for the expense (e.g., "https://www.bls.gov").

--- Current capexTable Data ---
{
  "expenses": [
    {
      "expense_name": "Placeholder",
      "amount": 0,
      "purchase_year": 2024,
      "depreciation_life": 5,
      "source_link": "",
      "source_string": "Placeholder",
      "notes": "This is a placeholder item"
    }
  ]
}

--- opexTable Structure Information ---
6. OPEX Table
Description: The OPEX (Operating Expenses) table records regular expenses related to the day-to-day operations of the business.

Structure Explanation:

expenses (List): Each item represents a unique operating expense.
expense_name (String): Name or description of the operating expense (e.g., "Utilities").
amount (Number): Cost of the expense in dollars.
frequency (String): How often the expense occurs, such as "monthly" or "annually".
notes (String): Additional notes or assumptions about the expense.
source_string (String): A human-readable description of the source, such as the name of a government agency, publication, or organization (e.g., "Bureau of Labor Statistics").
source_link (String): A hyperlink to the source's website or document, providing additional details or references for the expense (e.g., "https://www.bls.gov").

--- Current opexTable Data ---
{
  "expenses": [
    {
      "expense_name": "Placeholder",
      "amount": 0,
      "frequency": "",
      "source_link": "",
      "source_string": "Placeholder",
      "notes": "This is a placeholder item"
    }
  ]
}

--- employeesTable Structure Information ---
3. Employees Table
Description: The Employees table records information about the workforce, including roles, wages, work hours, and assumptions or notes related to each role.

Structure Explanation:

employees (List): Each item represents a distinct employee role within the company.
role (String): Job title or role (e.g., "Cashier").
number (Integer): Number of employees in this role.
wage (Number): Hourly or annual wage in dollars, based on wage_type.
wage_type (String): Indicates if the wage is "hourly" or "salary".
monthly_hours (Integer): Expected hours worked per month.
notes (String): Any additional details or assumptions about the role.
source_string (String): A human-readable description of the source, such as the name of a government agency, publication, or organization (e.g., "Bureau of Labor Statistics").
source_link (String): A hyperlink to the source's website or document, providing additional details or references for the expense (e.g., "https://www.bls.gov").

--- Current employeesTable Data ---
{
  "employees": [
    {
      "role": "Placeholder Role",
      "number": 0,
      "wage": 0,
      "wage_type": "salary",
      "monthly_hours": 0,
      "notes": "This is a placeholder item",
      "source_link": "",
      "source_string": "Placeholder"
    }
  ]
}

--- comparablesTable Structure Information ---
comparables (List): A list where each item represents a comparable business.
company_name (String): The name of the comparable company.
market_cap (Number): The market capitalization of the company, which is the total market value of all outstanding shares.
enterprise_value (Number): A measure of the company's total value, often used as a more comprehensive alternative to market cap.
ebitda (Number): EBITDA, or earnings before interest, taxes, depreciation, and amortization, which indicates the company’s profitability.
ev_to_ebitda (Number): The enterprise value-to-EBITDA ratio, used to evaluate the relative value of the company.
equity_beta (Number): A measure of the stock's volatility relative to the broader market (systematic risk).
asset_beta (Number): A measure of the company's asset volatility, accounting for both business and financial risks.

--- Current comparablesTable Data ---
{
  "Enterprise Value": {
    "value": 0,
    "notes": "Placeholder enterprise value."
  },
  "Market Cap": {
    "value": 0,
    "notes": "Placeholder market cap."
  },
  "EBITDA": {
    "value": 0,
    "notes": "Placeholder EBITDA."
  },
  "Equity Beta": {
    "value": 0,
    "notes": "Placeholder equity beta."
  },
  "Asset Beta": {
    "value": 0,
    "notes": "Placeholder asset beta."
  },
  "EV/EBITDA": {
    "value": 0,
    "notes": "Placeholder EV/EBITDA."
  }
}

--- financialsTable Structure Information ---
4. Financials Table
Description: The Financials table includes historical or projected financial data, primarily for revenue and expense categories. It organizes data by year, detailing revenues, expenses, and profit margins.

Structure Explanation:

financials (List): Each item represents financial data for a specific year.
year (Integer): The year for which the financial data applies.
revenue (Number): Total revenue for the year.
expenses (Number): Total expenses for the year.
profit_margin (Percentage): Profit margin for that year as a decimal.

--- Current financialsTable Data ---
{
  "1995": {
    "Revenue": null,
    "Direct Costs": null,
    "SG&A": null,
    "Employee Salaries": null,
    "EBITDA": null,
    "Depreciation": null,
    "EBIT": null,
    "Interest": null,
    "Taxes": null,
    "Net Income": null
  }
}

--- ingredientsTable Structure Information ---
5. Ingredients Table
Description: The Ingredients table lists individual ingredients or components used to make products, including costs and units. 

Structure Explanation:

purchases_table (List): Each item in this list represents an ingredient or component used in production. Every ingredient includes fields for unique identification, measurement, and cost details.

ingredient_id (Integer): A unique identifier for the ingredient, ensuring each entry can be referenced and updated accurately. 

ingredient_name (String): The name of the ingredient (e.g., "Flour," "Packaging Box"), identifying the main component.

unit (String): The unit of measurement for the ingredient, such as "kg" or "box," to define its purchasing or usage amount.

price (Number): The cost per unit of the ingredient, capturing its price based on the provided unit.

notes (String): Additional information or assumptions about the ingredient, such as special sourcing requirements, quality notes, or any particular handling needs.

price_data_raw (List): This list contains sub-items that provide further granularity to the ingredient cost, useful for cases where ingredients are sourced from multiple vendors or vary in packaging. Each sub-item under price_data_raw is represented as a child node in the tree view, containing the following fields:

unit_name (String): A description of the specific unit type (e.g., "Standard Box," "Bulk Pack") for additional clarity on pricing.

price (Number): The price for the specified unit configuration, matching the unit_name.

selling_quantity (String/Number): Quantity available in this unit for sale (e.g., 10 units per box).

unit (String): The unit of sale (e.g., "box," "pallet"), defining how the ingredient is offered by suppliers.

company (String): The supplier’s name, which can aid in tracking or comparing vendor options.

source (String): The link or contact information for the supplier, facilitating easy access to purchase or reference additional product details.

--- Current ingredientsTable Data ---
{
  "purchases_table": [
    {
      "ingredient_id": 1,
      "ingredient_name": "Ingredient A",
      "price_data_raw": [
        {
          "unit_name": "Standard Box",
          "price": 5.0,
          "selling_quantity": "10",
          "unit": "box",
          "company": "Example Inc.",
          "source": "example.com"
        }
      ]
    }
  ]
}

--- revenueTable Structure Information ---
Packages: Each key in the JSON file represents a package (sales item), which includes:
name: The name of the package.
price: The total price charged for the package.
price_notes: Notes explaining the price.
ingredients: A list of components that make up the package. Each ingredient has:
ingredient_id: Unique identifier.
ingredient_name: The name of the ingredient.
amount: The quantity used.
unit: The unit of measurement (e.g., box, GB).
price: The price per unit.
notes: Additional details about the ingredient.
processing_list: A list of processes involved in delivering the package.

Packages DO NOT need to have multiple ingredients. This format is setup so that each package contributes to revenue through "price" and COGS through the ingredient prices.


--- Current revenueTable Data ---
{
  "recipes": [
    {
      "name": "Recipe 1",
      "price": 50,
      "price_notes": "Sample price note",
      "ingredients": [
        {
          "amount": 2,
          "ingredient_id": 1,
          "ingredient_name": "Ingredient A",
          "notes": "Sample ingredient note",
          "price": 10,
          "unit": "kg"
        }
      ]
    }
  ]
}

Running Summary of Processed PDF:
This is the first call for this project and there is no running summary.